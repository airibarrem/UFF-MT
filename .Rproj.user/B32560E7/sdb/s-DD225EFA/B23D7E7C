{
    "collab_server" : "",
    "contents" : "#rm(list=ls())\n# UFF MATO GROSSO SPATIAL ANALYSES WRAPPER\n\nrm(list=ls())\n\nmaster.dir = '/media/alvaro/Windows/Users/Alvaro/Documents/IIS_PROJECTS/SpAM/'\n\nrequire('gdxrrw')\nsource(paste0(master.dir,'LU_gen.R'))\n\n# Reading shapefiles produced using GDXplot.R from GAMS output model.gdx\nsp = list(BAU=0,FTY=0,SEM=0)\nsp$BAU = shapefile('./in/gdx/MT_MUNI_BAU_2030_LULC.shp')\nsp$FTY = shapefile('./in/gdx/MT_MUNI_FTY_2030_LULC.shp')\nsp$SEM = shapefile('./in/gdx/MT_MUNI_SEM_2030_LULC.shp')\n\n# Setting land-use names from the set in the GAMS model\nlu.names = c('SOYA', 'SOMAI', 'SOCOT', 'CATTL', 'GPCTL', 'SINGL', 'SELOG', 'NOSYS')\nlu.fullnames = c('Single soy plantations', 'Soy-maize double-cropping',\n                 'Soy-cotton ouble cropping', 'Traditional cattle-ranching',\n                 'Improved cattle-ranching', 'Other crop', 'Logging', 'Forest')\n\n# Getting land-use information for each scenario\nlu = lapply(names(sp),function(x){sp[names(sp) %in% x][[1]]@data[,names(sp[names(sp) %in% x][[1]]@data) %in% lu.names]})\nnames(lu) = names(sp)\nlu = lapply(lu, function(x){row.names(x)=sp$BAU@data$codigo_ibg; return(x)})\n\n# Checking consistency of GAMS input\nif (round(Reduce('*',rowSums(lu$BAU)),digits=6) != 1){warning('Inconsistent land-use input')}\n\n# Reading raster files currently inside ./in/iis/\nsp.files = c(grep('tif$',dir('./in/iis/'),value=T), grep('shp$',dir('./in/iis/'),value=T))\n\n# Background (base) raster\nif (!('bgd.tif' %in% sp.files)){\n  bgd = raster('./in/iis/municipios_mt_wgs.tif')\n  bgd = bgd/bgd\n  bgd[bgd == 1] = 0\n  #writeRaster(bgd,filename='./in/sp/bgd.tif')  \n} #else {bgd = raster('./in/sp/bgd.tif')}\n\n# Reclassifying land-use key to the following classification:\n# 1: Single Soy, 2: Forest, 3: Pasture, 4: Single (Cotton + Irrigated), 5: Soy-Cotton, 6: Soy-Corn, 7: Unclassified\nif (!('LU2006.tif' %in% sp.files)){\n  LU.2006 = rcompose('./in/iis/GY2006.tif',bgd)\n  LU.2006[LU.2006 == -2] = 2 # Forest\n  LU.2006[LU.2006 == -1] = 3 # Pasture\n  LU.2006[LU.2006 == 11] = 4 # Irrigated\n  LU.2006[LU.2006 == 99] = 7 # Unclassified\n  writeRaster(LU.2006, filename='./in/sp/LU2006.tif') \n}\n\n# Auxiliary files\nif (!('roads-MT.tif' %in% sp.files)){\n  roads = rcompose('./in/iis/roads_mt_wgs.tif',bgd)\n  roads[roads == 6] = 4\n  writeRaster(roads, filename='./in/sp/roads-MT.tif')  \n}\n\nif (!('slope-MT.tif' %in% sp.files)){\n  slope = rcompose('./in/iis/Declividade_br_1km.tif',bgd)\n  writeRaster(slope, filename='./in/sp/slope-MT.tif')  \n}\n\nif (!('silos-MT.shp' %in% sp.files)){\n  silos = raster('./in/iis/distance_silos_soja.tif')\n  silos = (silos==0)\n  silos = SpatialPoints(coordinates(silos)[which(values(silos)),])\n  shapefile(silos, filename='./in/sp/silos-MT.shp')  \n}\n\nif (!('sh-MT.shp' %in% sp.files)){\n  sh = raster('./in/iis/distance_slaughterhouses.tif')\n  sh = (sh==0)\n  sh = SpatialPoints(coordinates(sh)[which(values(sh)),])\n  shapefile(sh, filename='./in/sp/sh-MT.shp')  \n}\n\n\n# Setting up the config file for whole-state harmonize data run\n\n# config file setup: Supply chains\ncat(c('\\n', 'SUPPLY CHAINS', '************************************************************************', '\\n \\n'), file='./in/cfg.txt')\ncat(c('SC.NAMES',paste(lu.names,collapse=', '),'\\n \\n'),file='./in/cfg.txt',append=T)\ncat(c('YIELD.VALS', paste(rep(1,length(lu.names)),collapse=', '),'\\n \\n'), file='./in/cfg.txt',append=T)\ncat(c('PRICE.VALS', paste(rep(1,length(lu.names)),collapse=', '),'\\n \\n'), file='./in/cfg.txt',append=T)\ncat(c('COST.VALS', paste(rep(1,length(lu.names)),collapse=', '),'\\n \\n'), file='./in/cfg.txt',append=T)\ncat(c('PROD.VALS', paste(rep(1,length(lu.names)),collapse=', '),'\\n \\n'), file='./in/cfg.txt',append=T)\ncat(c('INCR.VALS', paste(rep(1,length(lu.names)),collapse=', '),'\\n \\n'), file='./in/cfg.txt',append=T)\n\n# config file setup: Spatial priors\ncat(c('\\n \\n', 'SPATIAL PRIORS', '***********************************************************************', '\\n \\n'), file='./in/cfg.txt',append=T)\ncat(c('SP.DIR', './in/sp/', '\\n \\n'), file='./in/cfg.txt',append=T)\ncat(paste('\\n', paste0(lu.names,'.WEIGHTS'), paste0(lu.names,'_wgt.txt'), '\\n'), file='./in/cfg.txt', append=T)\n\n# config file setup: Land-use / land-cover map\ncat(c('\\n \\n \\n', 'LAND-USE / LAND-COVER MAP', '*************************************************************', '\\n \\n'), file='./in/cfg.txt',append=T)\ncat(c('LU.FILE', 'LU2006.tif', '\\n \\n'), file='./in/cfg.txt',append=T)\ncat(c('LU.CLASSES', paste(c('SOYA', 'NOSYS', 'CATTL', 'SINGL', 'SOCOT', 'SOMAI', 'UNCL'),collapse=', '), '\\n \\n'), file='./in/cfg.txt',append=T)\ncat(c('LU.MASKS', 'UNCL', '\\n \\n'), file='./in/cfg.txt',append=T)\ncat(c('LC.CLASSES', paste(c('crop', 'for_close', 'grass', 'crop', 'crop', 'crop', 'other'),collapse=', '), '\\n \\n'), file='./in/cfg.txt',append=T)\ncat(c('LC.SLOPE', 'slope-MT.tif', '\\n \\n'), file='./in/cfg.txt',append=T)\n\n# config file setup: Travel-cost analysis\ncat(c('\\n \\n', 'TRAVEL COST ANALYSIS', '******************************************************************', '\\n \\n'), file='./in/cfg.txt',append=T)\ncat(c('ROADS.FILE', 'slope-MT.tif', '\\n \\n'), file='./in/cfg.txt',append=T)\ncat(c('ROADS.CLASSES', paste(c('road_main', 'road_trail', 'road_trail', 'road_acc'),collapse=', '), '\\n \\n \\n'), file='./in/cfg.txt',append=T)\ncat(c('Silos.PU', 'silos-MT.shp', '\\n \\n'), file='./in/cfg.txt',append=T)\ncat(c('Slaughterhouses.PU', 'sh-MT.shp', '\\n \\n'), file='./in/cfg.txt',append=T)\n\n\n# Runing harmonize data script for the whole state\nMT.data = harmonize.data(cfg.name='cfg.txt', cfg.dir='./in/', in.df=NULL,\n                         sf.on=T, cores=3, quiet=T)\n\n\n# Running main script and spliting the result\nBAU.res = LU.gen(cfg.dir='./in/BAU/', init.value=0.95, quiet=F)\nBAU.data = BAU.res[[1]]\nBAU.proj = BAU.res[[2]]\n\nBAU.proj$Mosaic[BAU.proj$Mosaic >= (which(names(BAU.proj) == 'Coffee_r'))] = BAU.proj$Mosaic[BAU.proj$Mosaic >= (which(names(BAU.proj) == 'Coffee_r'))] - 1\nBAU.proj$Coffee = BAU.proj$Coffee + BAU.proj$Coffee_r\nBAU.proj = BAU.proj[-which(names(BAU.proj) == 'Coffee_r')]\n\nwrite.csv(BAU.data$Config_opt, file='./out/BAU/BAU_config.csv')\n\n\nSEM.res = LU.gen(cfg.dir='./in/SEM/', init.value=0.95, quiet=F)\nSEM.data = SEM.res[[1]]\nSEM.proj = SEM.res[[2]]\n\nSEM.proj$Mosaic[SEM.proj$Mosaic >= (which(names(SEM.proj) == 'Cocoa'))] = SEM.proj$Mosaic[SEM.proj$Mosaic >= (which(names(SEM.proj) == 'Cocoa'))] - 1\nSEM.proj$Mosaic[SEM.proj$Mosaic >= (which(names(SEM.proj) == 'Coffee_r'))] = SEM.proj$Mosaic[SEM.proj$Mosaic >= (which(names(SEM.proj) == 'Coffee_r'))] - 1\nSEM.proj$Coffee = SEM.proj$Coffee + SEM.proj$Coffee_r\nSEM.proj = SEM.proj[-which(names(SEM.proj) == 'Coffee_r')]\nSEM.proj$Cocoa = SEM.proj$Cocoa + SEM.proj$Cocoa_s\nSEM.proj = SEM.proj[-which(names(SEM.proj) == 'Cocoa_s')]\n\nwrite.csv(SEM.data$Config_opt, file='./out/SEM/SEM_config.csv')\n\n\nbgd = BAU.data$Sp_data$Background_mask\n\n# Computes production based on LU.COMB areas and UFF yields (ton/ha)\n#sm.area=function(x){cond.area(BAU.data$LU_now[[x]])}\n#production = mapply('*', BAU.data$Config_opt$yield[-3],lapply(match(BAU.data$Config_opt$s_chains,names(BAU.data$LU_now))[-3],sm.area))\n#names(production) = BAU.data$Config_opt$s_chains[-3]\n\n\nLU_now_mos = BAU.data$LU_now\nLU_now_mos = BAU.data$LU_now[match(names(BAU.proj),names(LU_now_mos))]\nLU_now_mos = LU_now_mos[!unlist(lapply(LU_now_mos,is.null))]\nLU_now_mos = Reduce('+',mapply('*',1:length(LU_now_mos),LU_now_mos))\n\n# Output mosaics\nwriteRaster(LU_now_mos+bgd, './out/SM-2012.tif',overwrite=T)\nwriteRaster(BAU.proj$Mosaic, './out/BAU/SM-BAU.tif',overwrite=T)\nwriteRaster(SEM.proj$Mosaic, './out/SEM/SM-SEM.tif',overwrite=T)\n\n# Creating layer for deforestation for LU.proj\nBAU.proj$Deforestation = BAU.data$LU_now$Forest - BAU.proj$Forest\nSEM.proj$Deforestation = SEM.data$LU_now$Forest - SEM.proj$Forest\n\n# Avoided deforestation map\ndefor.avoided = BAU.proj$Deforestation - SEM.proj$Deforestation\n\n# Conversion rates\nBAU.conv = lapply(BAU.proj, function(x){cond.area(x*BAU.proj$Deforestation)})\nSEM.conv = lapply(SEM.proj, function(x){cond.area(x*SEM.proj$Deforestation)})\n\nconv.data = data.frame('BAU'=as.numeric(BAU.conv),'SEM'=as.numeric(SEM.conv))[-which(names(BAU.proj) %in% c('Forest','Water', 'Other', 'Mosaic')),]\nrow.names(conv.data) = names(BAU.proj[-which(names(BAU.proj) %in% c('Forest','Water', 'Other', 'Mosaic'))])\n\nwrite.csv(conv.data,file='./out/conv_data.csv')\n\n\n# Carbon stock map\nc.stk = BAU.data$Sp_data$\"SM-CSTK.tif\"\n\n# Estimate of total carbon emission\nBAU.closs = cond.area(c.stk*BAU.proj$Deforestation)/100\nSEM.closs = cond.area(c.stk*SEM.proj$Deforestation)/100\n\n# SEM carbon additionality: avoided emissions + increased stocks due to\n# agroforestry Coffee: 8059 ha recovered from average ton/ha lost\nSEM.cadd = abs(SEM.closs - BAU.closs) + (2435 * (SEM.closs / cond.area(SEM.proj$Deforestation)))\n\n# Output images\n\njpeg(\"./out/avoided_defor.jpg\", res=600, width=10, height=9, unit='cm', pointsize=6)\nspplot(defor.avoided,\n       col.regions=colorRampPalette(colors=c('lightsteelblue','darkblue'),interpolate='spline'))\ndev.off()\n\nwriteRaster(defor.avoided,'./out/SEM/avoided_defor.tif',overwrite=T)\n\njpeg(\"./out/cocoa_indepth.jpg\", res=600, width=10, height=9, unit='cm', pointsize=6)\nspplot(stack(BAU.proj$Cocoa,-1*SEM.proj$Cocoa,BAU.proj$Cocoa - SEM.proj$Cocoa,\n             (BAU.proj$Cocoa * BAU.proj$Deforestation) - (SEM.proj$Cocoa * SEM.proj$Deforestation)),\n       names.attr=c('BAU', 'SEM', 'BAU - SEM', 'BAU defor. - SEM defor.'),\n       col.regions=colorRampPalette(colors=c('red', 'lightsteelblue','darkblue')))\ndev.off()\n\njpeg(\"./out/Coffee_indepth.jpg\", res=600, width=10, height=9, unit='cm', pointsize=6)\nspplot(stack(BAU.proj$Coffee,-1*SEM.proj$Coffee,BAU.proj$Coffee - SEM.proj$Coffee,\n             (BAU.proj$Coffee * BAU.proj$Deforestation) - (SEM.proj$Coffee * SEM.proj$Deforestation)),\n       names.attr=c('BAU', 'SEM', 'BAU - SEM', 'BAU defor. - SEM defor.'),\n       col.regions=colorRampPalette(colors=c('red', 'lightsteelblue','darkblue')))\ndev.off()\n\njpeg(\"./out/Maize_indepth.jpg\", res=600, width=10, height=9, unit='cm', pointsize=6)\nspplot(stack(BAU.proj$Maize,-1*SEM.proj$Maize,BAU.proj$Maize - SEM.proj$Maize,\n             (BAU.proj$Maize * BAU.proj$Deforestation) - (SEM.proj$Maize * SEM.proj$Deforestation)),\n       names.attr=c('BAU', 'SEM', 'BAU - SEM', 'BAU defor. - SEM defor.'),\n       col.regions=colorRampPalette(colors=c('red', 'lightsteelblue','darkblue')))\ndev.off()\n\njpeg(\"./out/Beef_indepth.jpg\", res=600, width=10, height=9, unit='cm', pointsize=6)\nspplot(stack(BAU.proj$Beef,-1*SEM.proj$Beef,BAU.proj$Beef - SEM.proj$Beef,\n             (BAU.proj$Beef * BAU.proj$Deforestation) - (SEM.proj$Beef * SEM.proj$Deforestation)),\n       names.attr=c('BAU', 'SEM', 'BAU - SEM', 'BAU defor. - SEM defor.'),\n       col.regions=colorRampPalette(colors=c('red', 'lightsteelblue','darkblue')))\ndev.off()\n\njpeg(\"./out/Diverse_indepth.jpg\", res=600, width=10, height=9, unit='cm', pointsize=6)\nspplot(stack(BAU.proj$Diverse,-1*SEM.proj$Diverse,BAU.proj$Diverse - SEM.proj$Diverse,\n             (BAU.proj$Diverse * BAU.proj$Deforestation) - (SEM.proj$Diverse * SEM.proj$Deforestation)),\n       names.attr=c('BAU', 'SEM', 'BAU - SEM', 'BAU defor. - SEM defor.'),\n       col.regions=colorRampPalette(colors=c('red', 'lightsteelblue','darkblue')))\ndev.off()\n\n\njpeg(\"./out/SM-LU-2012.jpg\", res=600, width=20, height=9, unit='cm', pointsize=6)\nspplot(stack(BAU.data$LU_now[-c(9,10)])+bgd,names.attr=names(BAU.data$LU_now[-c(9,10)]),\n       col.regions=colorRampPalette(colors=c('lightsteelblue','darkblue'),interpolate='spline'))\ndev.off()\n\njpeg(\"./out/SM-CAP-2012.jpg\", res=600, width=20, height=9, unit='cm', pointsize=6)\nspplot(stack(BAU.data$Sp_data$\"SM-CAP-TEMP.tif\",BAU.data$Sp_data$\"SM-CAP-PERM.tif\"),names.attr=c('Temporary crop', 'Permanent crop'),\n       col.regions=colorRampPalette(colors=c('lightsteelblue','darkblue'),interpolate='spline'))\ndev.off()\n\njpeg(\"./out/SM-TC-2012.jpg\", res=600, width=20, height=9, unit='cm', pointsize=6)\nspplot(stack(BAU.data$TC_maps),\n       col.regions=colorRampPalette(colors=c('lightsteelblue','dodgerblue4','darkblue'),interpolate='spline'))\ndev.off()\n\njpeg(\"./out/SM-PRIORS.jpg\", res=600, width=15, height=9, unit='cm', pointsize=6)\nspplot(stack(SEM.data$SC_priors),\n       col.regions=colorRampPalette(colors=c('lightsteelblue','dodgerblue4','darkblue'),interpolate='spline'))\ndev.off()\n\njpeg(\"./out/BAU/SM-BAU-2024.jpg\", res=600, width=20, height=9, unit='cm', pointsize=6)\nspplot(stack(BAU.proj[-c(9,11)]),\n       col.regions=colorRampPalette(colors=c('lightsteelblue','dodgerblue4','darkblue'),interpolate='spline'))\ndev.off()\n\njpeg(\"./out/SEM/SM-SEM-2024.jpg\", res=600, width=20, height=9, unit='cm', pointsize=6)\nspplot(stack(SEM.proj[-c(9,11)]),\n       col.regions=colorRampPalette(colors=c('lightsteelblue','dodgerblue4','darkblue'),interpolate='spline'))\ndev.off()\n",
    "created" : 1469198274543.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1621893847",
    "id" : "B23D7E7C",
    "lastKnownWriteTime" : 1469796963,
    "last_content_update" : 1469796963,
    "path" : "/media/alvaro/Files/UFF/MT-downscaling/MT_sp_prepare.R",
    "project_path" : "MT_sp_prepare.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}